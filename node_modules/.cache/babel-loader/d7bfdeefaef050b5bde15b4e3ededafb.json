{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Projects/chitter-react/src/pages/New/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Axios from \"axios\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./index.css\";\nimport { useContext } from \"react\";\nimport { UserContext } from \"../../Contexts/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n  input: {\n    display: \"none\"\n  }\n}));\nexport default function NewTweet() {\n  _s();\n\n  const classes = useStyles();\n  const url = \"https://api.cloudinary.com/v1_1/dryaxqxie/image/upload\";\n  const preset = \"chitter\";\n  const [passwordMsg, setPasswordMsg] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [emailReg, setEmailReg] = useState(\"\");\n  const [passwordReg, setPasswordReg] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [usernameReg, setUsernameReg] = useState(\"\");\n  const [fullNameReg, setFullNameReg] = useState(\"\");\n  const data = useContext(UserContext);\n  const [tweet, setTweet] = useState(\"\");\n  let newMsgTimeoutHandle = 0;\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [emailMsg, setEmailMsg] = useState(\"\");\n  const [userMsg, setUserMsg] = useState(\"\");\n\n  const onChange = e => {\n    setImage(e.target.files[0]);\n  };\n\n  const componentWillUnmount = () => {\n    clearTimeout(newMsgTimeoutHandle);\n  };\n\n  const register = async () => {\n    const formData = new FormData();\n    formData.append(\"file\", image);\n    formData.append(\"upload_preset\", preset);\n    const res = await Axios.post(url, formData);\n    const publicId = res.data.secure_url;\n\n    try {\n      await Axios.post(\"http://localhost:3001/tweets/new/\", {\n        text: tweet,\n        author: data,\n        imageUrl: publicId\n      }, {\n        withCredentials: true\n      }).then(response => {\n        console.log(response);\n\n        if (response.data === \"Tweet Created\") {\n          window.location.href = \"/\";\n        } else if (response.data !== \"Tweet Created\") {\n          setErrorMsg(\"User already exists, please sign in or create new account\");\n          clearTimeout(newMsgTimeoutHandle);\n          newMsgTimeoutHandle = setTimeout(() => {\n            setErrorMsg(\"\");\n            newMsgTimeoutHandle = 0;\n          }, 6500);\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const checkValidation = e => {\n    register();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [errorMsg, /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"standard-full-width\",\n        label: \"username\",\n        placeholder: \"tweet\",\n        fullWidth: true,\n        margin: \"normal\",\n        InputLabelProps: {\n          shrink: true\n        },\n        onChange: e => {\n          setTweet(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        style: {\n          margin: 30\n        },\n        className: \"uploadBtn\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          accept: \"image/*\",\n          className: classes.input,\n          id: \"contained-button-file\",\n          multiple: true,\n          type: \"file\",\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"contained-button-file\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            component: \"span\",\n            children: \"Upload Profile Picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploadBtn\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          style: {\n            width: 290,\n            backgroundColor: \"lightblue\"\n          },\n          onClick: checkValidation,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewTweet, \"AvkQJwpDRmW8vJzU7YNYL4TqJus=\", false, function () {\n  return [useStyles];\n});\n\n_c = NewTweet;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTweet\");","map":{"version":3,"sources":["/Users/phil/Projects/chitter-react/src/pages/New/index.js"],"names":["React","useState","TextField","Button","Axios","makeStyles","useContext","UserContext","useStyles","theme","root","margin","spacing","input","display","NewTweet","classes","url","preset","passwordMsg","setPasswordMsg","image","setImage","emailReg","setEmailReg","passwordReg","setPasswordReg","confirmPassword","setConfirmPassword","usernameReg","setUsernameReg","fullNameReg","setFullNameReg","data","tweet","setTweet","newMsgTimeoutHandle","errorMsg","setErrorMsg","emailMsg","setEmailMsg","userMsg","setUserMsg","onChange","e","target","files","componentWillUnmount","clearTimeout","register","formData","FormData","append","res","post","publicId","secure_url","text","author","imageUrl","withCredentials","then","response","console","log","window","location","href","setTimeout","err","error","checkValidation","shrink","value","width","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Axios from \"axios\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./index.css\";\nimport { useContext } from \"react\";\nimport { UserContext } from \"../../Contexts/UserContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n}));\n\nexport default function NewTweet() {\n  const classes = useStyles();\n\n  const url = \"https://api.cloudinary.com/v1_1/dryaxqxie/image/upload\";\n  const preset = \"chitter\";\n  const [passwordMsg, setPasswordMsg] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [emailReg, setEmailReg] = useState(\"\");\n  const [passwordReg, setPasswordReg] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [usernameReg, setUsernameReg] = useState(\"\");\n  const [fullNameReg, setFullNameReg] = useState(\"\");\n  const data = useContext(UserContext);\n\n  const [tweet, setTweet] = useState(\"\");\n  let newMsgTimeoutHandle = 0;\n\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [emailMsg, setEmailMsg] = useState(\"\");\n  const [userMsg, setUserMsg] = useState(\"\");\n\n\n  const onChange = (e) => {\n    setImage(e.target.files[0]);\n  };\n\n  const componentWillUnmount = () => {\n    clearTimeout(newMsgTimeoutHandle);\n  };\n\n  const register = async () => {\n    const formData = new FormData();\n    formData.append(\"file\", image);\n    formData.append(\"upload_preset\", preset);\n    const res = await Axios.post(url, formData);\n    const publicId = res.data.secure_url;\n    try {\n      await Axios.post(\n        \"http://localhost:3001/tweets/new/\",\n        {\n          text: tweet,\n          author: data,\n          imageUrl: publicId,\n        },\n        {\n          withCredentials: true,\n        }\n      ).then((response) => {\n        console.log(response);\n        if (response.data === \"Tweet Created\") {\n          window.location.href = \"/\";\n        } else if (response.data !== \"Tweet Created\") {\n          setErrorMsg(\n            \"User already exists, please sign in or create new account\"\n          );\n          clearTimeout(newMsgTimeoutHandle);\n          newMsgTimeoutHandle = setTimeout(() => {\n            setErrorMsg(\"\");\n            newMsgTimeoutHandle = 0;\n          }, 6500);\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const checkValidation = (e) => {\n    register()\n  };\n\n  return (\n    <div>\n      {errorMsg}\n      <form autoComplete=\"off\">\n        <TextField\n          id=\"standard-full-width\"\n          label=\"username\"\n          placeholder=\"tweet\"\n          fullWidth\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={(e) => {\n            setTweet(e.target.value);\n          }}\n        />\n        <div\n          className={classes.root}\n          style={{ margin: 30 }}\n          className=\"uploadBtn\"\n        >\n          <input\n          required\n            accept=\"image/*\"\n            className={classes.input}\n            id=\"contained-button-file\"\n            multiple\n            type=\"file\"\n            onChange={onChange}\n          />\n          <label htmlFor=\"contained-button-file\">\n            <Button variant=\"contained\" component=\"span\">\n              Upload Profile Picture\n            </Button>\n          </label>\n        </div>\n        <div   className=\"uploadBtn\">\n          <Button\n            variant=\"contained\"\n            style={{width: 290, backgroundColor: \"lightblue\" }}\n            onClick={checkValidation}\n          >\n            Submit\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}