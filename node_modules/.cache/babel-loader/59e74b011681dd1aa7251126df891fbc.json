{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Projects/chitter-react/src/pages/Profile/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\"; // import { Link } from \"react-router-dom\";\n// import { UserContext } from \"../../Contexts/UserContext\";\n\nimport BlueTit from \"./bluetit.jpeg\";\nimport { useParams } from \"react-router-dom\"; // import Tweet from \"../../components/Tweet/\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Profile() {\n  _s();\n\n  const [data, setData] = useState();\n  const {\n    userId\n  } = useParams();\n\n  const getProfileData = function (userId) {\n    // const data = useContext(UserContext)\n    console.log(\"getProfileData\");\n\n    if (!userId) {\n      Axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:3001/user\"\n      }).then(res => {\n        console.log(res.data);\n        setData(res.data);\n      });\n    } else {\n      Axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:3001/user/\" + userId\n      }).then(res => {\n        console.log(res.data);\n        setData(res.data); // console.log(res.data)\n        // return (res.data);\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"user id is \", userId);\n    getProfileData(userId);\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile_photo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: BlueTit,\n        alt: \"new user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The Profile Page of \", data.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), data.tweets.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Value \", value.body]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User \", value.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Created At \", value.createdAt]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Tweet, {\n          tweet: value.body,\n          username: value.username,\n          createdAt: value.createdAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)), allData.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Tweet, {\n          tweet: value.body,\n          username: value.username,\n          createdAt: value.createdAt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Profile, \"QgiAQbD4QR1RB2yoJyO/SNpC9SU=\", false, function () {\n  return [useParams];\n});\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/phil/Projects/chitter-react/src/pages/Profile/index.js"],"names":["React","useEffect","useState","Axios","BlueTit","useParams","Profile","data","setData","userId","getProfileData","console","log","method","withCredentials","url","then","res","username","tweets","map","value","index","body","createdAt","allData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\n// import { Link } from \"react-router-dom\";\n// import { UserContext } from \"../../Contexts/UserContext\";\nimport BlueTit from \"./bluetit.jpeg\";\nimport { useParams } from \"react-router-dom\";\n// import Tweet from \"../../components/Tweet/\";\n\nexport default function Profile() {\n  const [data, setData] = useState();\n  const { userId } = useParams();\n\n  const getProfileData = function (userId) {\n    // const data = useContext(UserContext)\n    console.log(\"getProfileData\");\n    if (!userId) {\n      Axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:3001/user\",\n      }).then((res) => {\n        console.log(res.data);\n        setData(res.data);\n      });\n    } else {\n      Axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:3001/user/\" + userId,\n      }).then((res) => {\n        console.log(res.data);\n        setData(res.data);\n        // console.log(res.data)\n        // return (res.data);\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"user id is \", userId);\n\n    getProfileData(userId);\n  }, [userId]);\n\n  return (\n    <div>\n      <div className=\"profile_photo\">\n        <img src={BlueTit} alt=\"new user\" />\n      </div>\n      {data ? (\n        <div>\n          <p>The Profile Page of {data.username}</p>\n          {data.tweets.map((value, index) => (\n            <div>\n              <p>Value {value.body}</p>\n              <p>User {value.username}</p>\n              <p>Created At {value.createdAt}</p>\n              <Tweet tweet={value.body} username={value.username} createdAt={value.createdAt}/>\n            </div>\n          ))}\n                {allData.map((value, index) => (\n        <div>\n          <Tweet tweet={value.body} username={value.username} createdAt={value.createdAt}/>\n        </div>\n      ))}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}