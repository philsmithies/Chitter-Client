{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Projects/chitter-react/src/components/LogInForm/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LogInForm() {\n  _s();\n\n  const [loginUsername, setLoginUsername] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n\n  const login = () => {\n    Axios({\n      method: \"POST\",\n      data: {\n        username: loginUsername.toLowerCase(),\n        password: loginPassword\n      },\n      withCredentials: true,\n      url: \"http://localhost:3001/login\"\n    }).then(res => {\n      if (res.data === \"Successfully Authenticated\") {\n        window.location.href = \"/\";\n      }\n    });\n  };\n\n  const checkValidation = e => {\n    if (!emailRegex.test(emailReg)) {\n      setEmailError(true);\n      setEmailMsg(\"Not a valid email address\");\n      clearTimeout(newMsgTimeoutHandle);\n      newMsgTimeoutHandle = setTimeout(() => {\n        setEmailMsg(\"\");\n        newMsgTimeoutHandle = 0;\n      }, 6500);\n    } else if (passwordReg !== confirmPassword) {\n      setPasswordMsg(\"Passwords do not match\");\n      setPasswordConfirmError(true);\n      clearTimeout(newMsgTimeoutHandle);\n      newMsgTimeoutHandle = setTimeout(() => {\n        setPasswordMsg(\"\");\n        newMsgTimeoutHandle = 0;\n      }, 6500);\n    } else if (usernameReg === \"\" || userRegex.test(usernameReg)) {\n      setUserMsg(\"Please enter a valid username without spaces\");\n      setUsernameError(true);\n      clearTimeout(newMsgTimeoutHandle);\n      newMsgTimeoutHandle = setTimeout(() => {\n        setUserMsg(\"\");\n        newMsgTimeoutHandle = 0;\n      }, 6500);\n    } else {\n      register();\n    }\n  };\n\n  \"No User Exists\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-full-width\",\n      label: \"username\",\n      placeholder: \"@jim\",\n      fullWidth: true,\n      margin: \"normal\",\n      InputLabelProps: {\n        shrink: true\n      },\n      onChange: e => {\n        setLoginUsername(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      type: \"password\",\n      id: \"standard-full-width\",\n      label: \"password\",\n      placeholder: \"***********\",\n      fullWidth: true,\n      margin: \"normal\",\n      InputLabelProps: {\n        shrink: true\n      },\n      onChange: e => {\n        setLoginPassword(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      style: {\n        margin: 30,\n        backgroundColor: \"lightblue\"\n      },\n      onClick: checkValidation,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LogInForm, \"SWXMbaxrQ+frrfTxQ70hR5INgTQ=\");\n\n_c = LogInForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogInForm\");","map":{"version":3,"sources":["/Users/phil/Projects/chitter-react/src/components/LogInForm/index.js"],"names":["React","useState","TextField","Button","Axios","LogInForm","loginUsername","setLoginUsername","loginPassword","setLoginPassword","login","method","data","username","toLowerCase","password","withCredentials","url","then","res","window","location","href","checkValidation","e","emailRegex","test","emailReg","setEmailError","setEmailMsg","clearTimeout","newMsgTimeoutHandle","setTimeout","passwordReg","confirmPassword","setPasswordMsg","setPasswordConfirmError","usernameReg","userRegex","setUserMsg","setUsernameError","register","shrink","target","value","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Axios from \"axios\";\n\nexport default function LogInForm() {\n  const [loginUsername, setLoginUsername] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n\n  const login = () => {\n    Axios({\n      method: \"POST\",\n      data: {\n        username: loginUsername.toLowerCase(),\n        password: loginPassword,\n      },\n      withCredentials: true,\n      url: \"http://localhost:3001/login\",\n    }).then((res) => {\n      if (res.data === \"Successfully Authenticated\") {\n        window.location.href = \"/\";\n      }\n    });\n  };\n\n\n  const checkValidation = (e) => {\n    if (!emailRegex.test(emailReg)) {\n      setEmailError(true);\n      setEmailMsg(\"Not a valid email address\");\n      clearTimeout(newMsgTimeoutHandle);\n      newMsgTimeoutHandle = setTimeout(() => {\n        setEmailMsg(\"\");\n        newMsgTimeoutHandle = 0;\n      }, 6500);\n    } else if (passwordReg !== confirmPassword) {\n      setPasswordMsg(\"Passwords do not match\");\n      setPasswordConfirmError(true);\n      clearTimeout(newMsgTimeoutHandle);\n      newMsgTimeoutHandle = setTimeout(() => {\n        setPasswordMsg(\"\");\n        newMsgTimeoutHandle = 0;\n      }, 6500);\n    } else if (usernameReg === \"\" || userRegex.test(usernameReg)) {\n      setUserMsg(\"Please enter a valid username without spaces\");\n      setUsernameError(true);\n      clearTimeout(newMsgTimeoutHandle);\n      newMsgTimeoutHandle = setTimeout(() => {\n        setUserMsg(\"\");\n        newMsgTimeoutHandle = 0;\n      }, 6500);\n    } else {\n      register();\n    }\n  };\n\n\n  \"No User Exists\"\n\n  return (\n    <form autoComplete=\"off\">\n      <TextField\n        id=\"standard-full-width\"\n        label=\"username\"\n        placeholder=\"@jim\"\n        fullWidth\n        margin=\"normal\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={(e) => {\n          setLoginUsername(e.target.value);\n        }}\n      />\n      <TextField\n        type=\"password\"\n        id=\"standard-full-width\"\n        label=\"password\"\n        placeholder=\"***********\"\n        fullWidth\n        margin=\"normal\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={(e) => {\n          setLoginPassword(e.target.value);\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        style={{ margin: 30, backgroundColor: \"lightblue\" }}\n        onClick={checkValidation}\n      >\n        Submit\n      </Button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}