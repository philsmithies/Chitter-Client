{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Projects/chitter-react/src/components/TweetModal/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, setState } from \"react\";\nimport \"./index.css\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TweetModal() {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  React.useEffect(() => {\n    const handleClick = e => {\n      if (e.target && e.target.className === \"modal\") {\n        setIsOpen(false);\n      }\n    };\n\n    if (isShown) {\n      window.addEventListener(\"click\", handleClick);\n    }\n  }, [isShown]);\n  const [tweet, setTweet] = useState(\"\");\n\n  const newTweet = async () => {\n    try {\n      await Axios.post(\"http://localhost:3001/new\", {\n        tweet: tweet\n      }, {\n        withCredentials: true\n      }).then(response => {\n        console.log(response);\n\n        if (response.data) {\n          window.location.href = \"/\";\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [isOpen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"modal__header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Modal Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: closeModal,\n            className: \"close-button\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"modal__main\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: newTweet,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                for: \"body\",\n                children: \"Tweet:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"tweet\",\n                name: \"tweet\",\n                required: true,\n                onChange: e => {\n                  setTweet(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: openModal,\n      children: \"Tweet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TweetModal, \"hRltZrGqrj1DrCKZPx61riyL8pw=\");\n\n_c = TweetModal;\nlet rootElement = document.getElementById(\"app\");\n\nconst Hint = props => {\n  var _s2 = $RefreshSig$();\n\n  const ToggleContent = ({\n    toggle,\n    content\n  }) => {\n    _s2();\n\n    const [isShown, setIsShown] = React.useState(false);\n\n    const hide = () => setIsShown(false);\n\n    const show = () => setIsShown(true);\n\n    React.useEffect(() => {\n      const handleClick = e => {\n        if (e.target && e.target.className === \"modal\") {\n          return setIsShown(false);\n        }\n      };\n\n      if (isShown) {\n        window.addEventListener(\"click\", handleClick);\n      }\n    }, [isShown]);\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [toggle(show), isShown && content(hide)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s2(ToggleContent, \"2ohGZd2qe3+TVUPaF+VZ5zy+/jU=\");\n\n  const Modal = ({\n    children\n  }) => {\n    return ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), document.body);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hint\",\n    children: /*#__PURE__*/_jsxDEV(ToggleContent, {\n      toggle: show => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint__icon\",\n        onClick: show,\n        children: props.hintLabel ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hint__label-text\",\n          children: props.hintLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this),\n      content: hide => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal__body\",\n        children: /*#__PURE__*/_jsxDEV(Modal, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"popup__wrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"popup__content\",\n                dangerouslySetInnerHTML: {\n                  __html: props.content\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: hide,\n              type: \"button\",\n              className: \"close\",\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Hint;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TweetModal\");\n$RefreshReg$(_c2, \"Hint\");","map":{"version":3,"sources":["/Users/phil/Projects/chitter-react/src/components/TweetModal/index.js"],"names":["React","useEffect","useState","setState","Axios","TweetModal","isOpen","setIsOpen","openModal","closeModal","handleClick","e","target","className","isShown","window","addEventListener","tweet","setTweet","newTweet","post","withCredentials","then","response","console","log","data","location","href","err","error","value","rootElement","document","getElementById","Hint","props","ToggleContent","toggle","content","setIsShown","hide","show","Modal","children","ReactDOM","createPortal","body","hintLabel","__html"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, setState } from \"react\";\nimport \"./index.css\";\nimport Axios from \"axios\";\n\nexport default function TweetModal() {\n  const [isOpen, setIsOpen] = useState(false);\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  React.useEffect(() => {\n    const handleClick = (e) => {\n      if (e.target && e.target.className === \"modal\") {\n        setIsOpen(false);\n      }\n    };\n    if (isShown) {\n      window.addEventListener(\"click\", handleClick);\n    }\n  }, [isShown]);\n\n  const [tweet, setTweet] = useState(\"\");\n\n  const newTweet = async () => {\n    try {\n      await Axios.post(\n        \"http://localhost:3001/new\",\n        {\n          tweet: tweet,\n        },\n        {\n          withCredentials: true,\n        }\n      ).then((response) => {\n        console.log(response);\n        if (response.data) {\n          window.location.href = \"/\";\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {isOpen && (\n        <>\n          <div className=\"overlay\"></div>\n          <div className=\"modal\">\n            <header className=\"modal__header\">\n              <h2>Modal Title</h2>\n              <button onClick={closeModal} className=\"close-button\">\n                &times;\n              </button>\n            </header>\n            <main className=\"modal__main\">\n              <div>\n                <form onSubmit={newTweet}>\n                  <label for=\"body\">Tweet:</label>\n                  <input\n                    type=\"text\"\n                    id=\"tweet\"\n                    name=\"tweet\"\n                    required\n                    onChange={(e) => {\n                      setTweet(e.target.value);\n                    }}\n                  />\n                  <button>Submit</button>\n                </form>\n              </div>\n            </main>\n          </div>\n        </>\n      )}\n\n      <button className=\"button\" onClick={openModal}>\n        Tweet\n      </button>\n    </div>\n  );\n}\n\nlet rootElement = document.getElementById(\"app\");\n\nconst Hint = (props) => {\n  const ToggleContent = ({ toggle, content }) => {\n    const [isShown, setIsShown] = React.useState(false);\n    const hide = () => setIsShown(false);\n    const show = () => setIsShown(true);\n\n    React.useEffect(() => {\n      const handleClick = (e) => {\n        if (e.target && e.target.className === \"modal\") {\n          return setIsShown(false);\n        }\n      };\n      if (isShown) {\n        window.addEventListener(\"click\", handleClick);\n      }\n    }, [isShown]);\n\n    return (\n      <React.Fragment>\n        {toggle(show)}\n        {isShown && content(hide)}\n      </React.Fragment>\n    );\n  };\n\n  const Modal = ({ children }) => {\n    return ReactDOM.createPortal(\n      <div className=\"modal\">{children}</div>,\n      document.body\n    );\n  };\n\n  return (\n    <div className={\"hint\"}>\n      <ToggleContent\n        toggle={(show) => (\n          <div className={\"hint__icon\"} onClick={show}>\n            {props.hintLabel ? (\n              <div className={\"hint__label-text\"}>{props.hintLabel}</div>\n            ) : null}\n          </div>\n        )}\n        content={(hide) => (\n          <div className={\"modal__body\"}>\n            <Modal>\n              <div className={\"popup\"}>\n                <div className={\"popup__wrapper\"}>\n                  <div\n                    className={\"popup__content\"}\n                    dangerouslySetInnerHTML={{ __html: props.content }}\n                  ></div>\n                </div>\n                <button onClick={hide} type=\"button\" className=\"close\">\n                  X\n                </button>\n              </div>\n            </Modal>\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}