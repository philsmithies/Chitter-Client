{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Projects/chitter-react/src/components/Feed/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Tweet from '../Tweet/';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed() {\n  _s();\n\n  const [data, setData] = useState();\n  const [userId, setUserId] = useState(\"123\");\n  const [tweetId, setTweetId] = useState();\n  const [allData, setAllData] = useState([]);\n\n  const getTweets = () => {\n    axios(\"http://localhost:3001/tweets\").then(response => {\n      setAllData(response.data);\n      console.log(response.data);\n    }).catch(error => {\n      console.log(\"Error getting data: \" + error);\n    });\n  };\n\n  const getTweet = async () => {\n    try {\n      await axios.get(\"http://localhost:3001/tweets/\" + tweetId).then(response => {\n        console.log(response);\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getTweet();\n    getTweets();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: allData.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"tweets_feed\",\n      children: /*#__PURE__*/_jsxDEV(Tweet, {\n        tweetId: value._id,\n        text: value.text,\n        username: value.username,\n        createdAt: value.createdAt,\n        publicId: data ? data.publicId : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feed, \"Qxj/7FFcIJiQkgQ8ZTdmNlj4Qa4=\");\n\n_c = Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["/Users/phil/Projects/chitter-react/src/components/Feed/index.js"],"names":["useState","useEffect","axios","Tweet","Feed","data","setData","userId","setUserId","tweetId","setTweetId","allData","setAllData","getTweets","then","response","console","log","catch","error","getTweet","get","err","map","value","index","_id","text","username","createdAt","publicId"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAO,aAAP;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMa,SAAS,GAAG,MAAM;AACtBX,IAAAA,KAAK,CAAC,8BAAD,CAAL,CACGY,IADH,CACSC,QAAD,IAAc;AAClBH,MAAAA,UAAU,CAACG,QAAQ,CAACV,IAAV,CAAV;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACV,IAArB;AACD,KAJH,EAKGa,KALH,CAKUC,KAAD,IAAW;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBE,KAArC;AACD,KAPH;AAQD,GATD;;AAWA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMlB,KAAK,CAACmB,GAAN,CACJ,kCAAkCZ,OAD9B,EAEJK,IAFI,CAEEC,QAAD,IAAc;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,OAJK,CAAN;AAKD,KAND,CAME,OAAOO,GAAP,EAAY;AACZN,MAAAA,OAAO,CAACG,KAAR,CAAcG,GAAd;AACD;AACF,GAVD;;AAaArB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,QAAQ;AACRP,IAAAA,SAAS;AACV,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE;AAAA,cACGF,OAAO,CAACY,GAAR,CAAY,CAACC,KAAD,EAAQC,KAAR,kBACX;AAAK,MAAA,KAAK,EAAC,aAAX;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAED,KAAK,CAACE,GAAtB;AAA2B,QAAA,IAAI,EAAEF,KAAK,CAACG,IAAvC;AAA6C,QAAA,QAAQ,EAAEH,KAAK,CAACI,QAA7D;AAAuE,QAAA,SAAS,EAAEJ,KAAK,CAACK,SAAxF;AAAmG,QAAA,QAAQ,EAAExB,IAAI,GAAGA,IAAI,CAACyB,QAAR,GAAmB;AAApI;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA5CuB1B,I;;KAAAA,I","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Tweet from '../Tweet/'\nimport './index.css'\n\nexport default function Feed() {\n  const [data, setData] = useState();\n  const [userId, setUserId] = useState(\"123\");\n  const [tweetId, setTweetId] = useState()\n  const [allData, setAllData] = useState([]);\n\n  const getTweets = () => {\n    axios(\"http://localhost:3001/tweets\")\n      .then((response) => {\n        setAllData(response.data);\n        console.log(response.data)\n      })\n      .catch((error) => {\n        console.log(\"Error getting data: \" + error);\n      });\n  }\n\n  const getTweet = async () => {\n    try {\n      await axios.get(\n        \"http://localhost:3001/tweets/\" + tweetId,\n      ).then((response) => {\n        console.log(response);\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  useEffect(() => {\n    getTweet()\n    getTweets()\n  }, []);\n\n  return(\n    <div>\n      {allData.map((value, index) => (\n        <div class=\"tweets_feed\">\n          <Tweet tweetId={value._id} text={value.text} username={value.username} createdAt={value.createdAt} publicId={data ? data.publicId : ''} />\n        </div>\n      ))}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}