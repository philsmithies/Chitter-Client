{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Projects/chitter-react/src/components/TweetModal/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, setState, useRef } from \"react\";\nimport \"./index.css\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction useOnClick(ref, handler) {\n  _s();\n\n  useEffect(() => {\n    const listener = event => {\n      // Inner Click: Do nothing if clicking ref's element or descendent elements, similar to the solution I gave in my comment stackoverflow.com/a/54633645/4490712 \n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      } // Outer Click: Do nothing if clicking wrapper ref\n\n\n      if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    }; // Here we are subscribing our listener to the document\n\n\n    document.addEventListener(\"mousedown\", listener);\n    return () => {\n      // And unsubscribing it when we are no longer showing this component\n      document.removeEventListener(\"mousedown\", listener);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\n_s(useOnClick, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default function TweetModal() {\n  _s2();\n\n  const ref = useRef();\n  useOnClick(ref, () => toggle(false));\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  const closeModal = () => {\n    console.log('closed');\n    setIsOpen(false);\n  }; // useEffect(() => {\n  //   const handleClick = (e) => {\n  //     if (e.ae.target.className !== \"modal\") {\n  //       closeModal()\n  //     }\n  //   };\n  //   if (isOpen) {\n  //     console.log('open')\n  //     window.addEventListener(\"click\", handleClick);\n  //   }\n  // }, [isOpen]);\n\n\n  const [tweet, setTweet] = useState(\"\");\n\n  const newTweet = async () => {\n    try {\n      await Axios.post(\"http://localhost:3001/new\", {\n        tweet: tweet\n      }, {\n        withCredentials: true\n      }).then(response => {\n        console.log(response);\n\n        if (response.data) {\n          window.location.href = \"/\";\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: ref,\n    children: [isOpen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"modal__header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Modal Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: closeModal,\n            className: \"close-button\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"modal__main\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: newTweet,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                for: \"body\",\n                children: \"Tweet:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"tweet\",\n                name: \"tweet\",\n                required: true,\n                onChange: e => {\n                  setTweet(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: openModal,\n      children: \"Tweet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TweetModal, \"zFhb8Uqz+HaswiEQsFRHif87JpA=\", false, function () {\n  return [useOnClick];\n});\n\n_c = TweetModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetModal\");","map":{"version":3,"sources":["/Users/phil/Projects/chitter-react/src/components/TweetModal/index.js"],"names":["React","useEffect","useState","setState","useRef","Axios","useOnClick","ref","handler","listener","event","current","contains","target","wrapperRef","document","addEventListener","removeEventListener","TweetModal","toggle","isOpen","setIsOpen","openModal","closeModal","console","log","tweet","setTweet","newTweet","post","withCredentials","then","response","data","window","location","href","err","error","e","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, setState, useRef } from \"react\";\nimport \"./index.css\";\nimport Axios from \"axios\";\n\nfunction useOnClick(ref, handler) {\n  useEffect(() => {\n      const listener = event => {\n          // Inner Click: Do nothing if clicking ref's element or descendent elements, similar to the solution I gave in my comment stackoverflow.com/a/54633645/4490712 \n          if (!ref.current || ref.current.contains(event.target)) {\n              return;\n          }\n          // Outer Click: Do nothing if clicking wrapper ref\n          if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n              return;\n          }\n\n          handler(event);\n      };\n\n      // Here we are subscribing our listener to the document\n      document.addEventListener(\"mousedown\", listener);\n\n      return () => {\n          // And unsubscribing it when we are no longer showing this component\n          document.removeEventListener(\"mousedown\", listener);\n      };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\nexport default function TweetModal() {\n\n  const ref = useRef();\n\n  useOnClick(ref, () => toggle(false));\n\n  const [isOpen, setIsOpen] = useState(false);\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  const closeModal = () => {\n    console.log('closed')\n    setIsOpen(false);\n  };\n\n  // useEffect(() => {\n  //   const handleClick = (e) => {\n  //     if (e.ae.target.className !== \"modal\") {\n  //       closeModal()\n  //     }\n  //   };\n  //   if (isOpen) {\n  //     console.log('open')\n  //     window.addEventListener(\"click\", handleClick);\n  //   }\n  // }, [isOpen]);\n\n  const [tweet, setTweet] = useState(\"\");\n\n  const newTweet = async () => {\n    try {\n      await Axios.post(\n        \"http://localhost:3001/new\",\n        {\n          tweet: tweet,\n        },\n        {\n          withCredentials: true,\n        }\n      ).then((response) => {\n        console.log(response);\n        if (response.data) {\n          window.location.href = \"/\";\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"App\" ref={ref}>\n      {isOpen && (\n        <>\n          <div className=\"overlay\"></div>\n          <div className=\"modal\">\n            <header className=\"modal__header\">\n              <h2>Modal Title</h2>\n              <button onClick={closeModal} className=\"close-button\">\n                &times;\n              </button>\n            </header>\n            <main className=\"modal__main\">\n              <div>\n                <form onSubmit={newTweet}>\n                  <label for=\"body\">Tweet:</label>\n                  <input\n                    type=\"text\"\n                    id=\"tweet\"\n                    name=\"tweet\"\n                    required\n                    onChange={(e) => {\n                      setTweet(e.target.value);\n                    }}\n                  />\n                  <button>Submit</button>\n                </form>\n              </div>\n            </main>\n          </div>\n        </>\n      )}\n\n      <button className=\"button\" onClick={openModal}>\n        Tweet\n      </button>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}